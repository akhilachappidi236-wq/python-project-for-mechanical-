# -*- coding: utf-8 -*-
"""akhila project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PLKXwiptUrHJe3eR91JhcKvVrCa-ZAtp
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import cumulative_trapezoid

def analyze_beam(L, support, load_type, magnitude, pos=None, E=210e9, I=8.333e-6, npts=1001):
    """
    Beam analyzer (Euler–Bernoulli).
    Inputs:
        L : beam length [m]
        support : "Simply Supported" or "Cantilever"
        load_type : "Point Load" or "UDL"
        magnitude : P [N] (for point load), w [N/m] (for UDL)
        pos : load position [m] (for point load only)
        E, I : material & section properties
    Returns:
        x, V, M, y : arrays for shear force, bending moment, deflection
    """
    x = np.linspace(0, L, npts)
    V = np.zeros_like(x)
    M = np.zeros_like(x)

    if support == "Simply Supported":
        if load_type == "Point Load":
            P, a = magnitude, pos
            R1 = P * (L - a) / L
            R2 = P * a / L
            V[:] = R1
            V[x >= a] -= P
            M = R1 * x
            idx = x >= a
            M[idx] = R1 * x[idx] - P * (x[idx] - a)

        elif load_type == "UDL":
            w = magnitude
            R1 = R2 = w * L / 2
            V = R1 - w * x
            M = R1 * x - 0.5 * w * x**2

        M[0] = 0
        M[-1] = 0

    elif support == "Cantilever":
        if load_type == "Point Load":
            P, a = magnitude, pos
            V[x <= a] = -P
            M[x <= a] = -P * (a - x[x <= a])

        elif load_type == "UDL":
            w = magnitude
            V = -w * (L - x)
            M = -0.5 * w * (L - x)**2
        M[-1] = 0

    # Deflection using double integration of M/(EI)
    kappa = M / (E * I)
    theta0 = cumulative_trapezoid(kappa, x, initial=0)
    y0 = cumulative_trapezoid(theta0, x, initial=0)

    if support == "Simply Supported":
        C1 = -(y0[-1]) / L
        y = y0 + C1 * x
    elif support == "Cantilever":
        y = y0

    return x, V, M, y


# ---------------- MAIN ----------------
if __name__ == "__main__":
    # Example: Simply supported beam, L=2 m, Point Load P=1000 N at midspan
    L = 2.0
    support = "Simply Supported"
    load_type = "Point Load"
    magnitude = 1000.0
    pos = L / 2

    x, V, M, y = analyze_beam(L, support, load_type, magnitude, pos)

    # Plot
    fig, axs = plt.subplots(3, 1, figsize=(8, 9))
    axs[0].plot(x, V)
    axs[0].set_title("Shear Force Diagram")
    axs[0].set_ylabel("V [N]")
    axs[0].grid(True)

    axs[1].plot(x, M)
    axs[1].set_title("Bending Moment Diagram")
    axs[1].set_ylabel("M [N·m]")
    axs[1].grid(True)

    axs[2].plot(x, y)
    axs[2].set_title("Deflection Curve")
    axs[2].set_xlabel("x [m]")
    axs[2].set_ylabel("y [m]")
    axs[2].grid(True)

    plt.tight_layout()
    plt.show()

